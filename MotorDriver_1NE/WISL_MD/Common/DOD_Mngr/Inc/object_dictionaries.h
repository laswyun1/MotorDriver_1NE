

#ifndef OBJECT_DICTIONARIES_H_
#define OBJECT_DICTIONARIES_H_

#include <stdint.h>
#include <string.h>

#include "module.h"


/**
 *-----------------------------------------------------------
 *              MACROS AND PREPROCESSOR DIRECTIVES
 *-----------------------------------------------------------
 * @brief Directives and macros for readability and efficiency.
 */

#define ROUTINE_MAX_NUM 30
#define SDO_MAX_NUM		80
#define PDO_MAX_NUM		60

/* PACKET SIZE*/
#define NODE_ID_SIZE 	1
#define ERR_CODE_SIZE 	4
#define OBJ_NUMS_SIZE 	1


/**
 *------------------------------------------------------------
 *                     TYPE DECLARATIONS
 *------------------------------------------------------------
 * @brief Custom data types and structures for the module.
 */

typedef enum{
	FIRST_USE = 0x01,
	SECOND_USE,
	MEMORY_UI_MOTOR_PROPERTIES,
	MEMORY_UI_SENSOR_SETTING,
	MEMORY_UI_ELECTRICAL_PROPERTIES,
	MEMORY_UI_MECHANICAL_PROPERTIES,
	MEMORY_UI_CONTROL_PARAMETERS1,
	MEMORY_UI_CONTROL_PARAMETERS2,
	MEMORY_UI_ADDITIONAL_FUNCTION_PARAMETERS,
	MEMORY_UI_IMU_PARAMETERS,

	E_SYS_BATCH,
	E_SYS_BEMF,
	BEMF_ID_OVER_CURRENT,
	BW_CHECK,
	GET_CURRENT_TRACKING_CHECK,
	FRICTION_ID_RAW_DATA,
	FRICTION_ID_AVERAGED_DATA,
	FRICTION_ID_DONE,
	FRICTION_COMPENSATOR_VERIFICATION,

	MECH_SYS_ID_SBS_RAW_DATA,
	MECH_SYS_ID_SBS_DONE,

	IRC_VERIFICATION,

	GET_IMPEDANCE_SINE_CTRL,
	GET_IMPEDANCE_REC_CTRL,

	GAIN_TUNER,
	GET_VELOCITY_CTRL,
	GET_POSITION_CTRL,

	GET_HALLSENSOR,
	GET_INCENCODER,
	GET_ABSENCODER1,
	GET_ABSENCODER2,

	GET_VSD_UPPER_LIMIT,
	GET_VSD_LOWER_LIMIT,

	VSD_VERIFICATION_DATA,

	GET_BACKLASH_TEST,
	GET_DOB_DATA,

	GET_DIRECTION_SET_DATA,
	GET_DIRECTION_SET_DONE,

	SAVE_DONE,
	GET_VE_TEST_DATA,
	GET_SYSTEM_ID_VERIFY,
	VE_KF_SETTING_ERROR,
	GET_FF_CTRL,
	GET_TOTAL_CTRL,

	ADV_FRICTION_ID_DATA,
	ADV_FRICTION_ID_DONE,

	GET_GAIT_PHASE,
	GET_ACC_GYRO,
	GET_QUATERNION,
	GET_MAG,
	//
	FRICTION_ID_VEL_CTRL_EVAL,
	GET_SBS_ID_VERIFY,
	GET_DOB_VERIFY,
	GET_ELEC_ANGLE_EST_EV,
	GET_HALL_VS_INCENC_DATA,
	GET_P_VECTOR_EVAL,
	GET_F_VECTOR_EVAL,
	GET_I_VECTOR_EVAL,
	GET_LINK_LUT,

	GET_ME491_PROJECT,

	GET_ACCELSENSORSCALING,
	GET_GYROSIGNCHECKING,
	GET_FUZZYDEBUG,
	GET_TVCF,
	GET_ACCELMEANVALUE,
	GET_GYROAUTOCALIB,
	GET_ACCELAUTOCALIB,

	TVCF_VERIFICATION_DATA,
	TVCF_VERIFICATION_DONE,

	EXPORT_SETTING_PROPERTIES
} GUISequence_Enum;

typedef enum{
	IDLE,
	UPLOAD_PROPERTIES,
	SAVE_PROPERTIES,
	DOWNLOAD_PROPERTIES,
	ELECTRICAL_SYSTEM_ID,
	BEMF_ID,
	CURRENT_BANDWIDTH_CHECK,
	CURRENT_TRACKING_CHECK,
	AUTO_TUNING,
	ADV_FRICTION_ID,
	CAL_FRICTION_LUT,
} MainSequence_Enum;

typedef enum _NodeID{
	NODE_ID_ALL		=	(uint8_t)0x0,		// switch 0000
	NODE_ID_CM	    =	(uint8_t)0x1,		// 0001
	NODE_ID_RH_COR	=	(uint8_t)0x2,		// 0010
	NODE_ID_LH_COR	=	(uint8_t)0x3,		// 0011
	NODE_ID_RH_TRA	=	(uint8_t)0x4,		// 0100
	NODE_ID_LH_TRA	=	(uint8_t)0x5,		// 0101
	NODE_ID_RH_SAG	=	(uint8_t)0x6,		// 0110	Angel Suit&L30 RH
	NODE_ID_LH_SAG	=	(uint8_t)0x7,		// 0111 Angel Suit&L30 LH
	NODE_ID_RK    	=	(uint8_t)0x8,		// 1000 Angel Suit&L30 RK
	NODE_ID_LK  	=	(uint8_t)0x9,		// 1001 Angel Suit&L30 LK
	NODE_ID_RA_MED	=	(uint8_t)0xA,		// 1010 Angel Suit& RA
	NODE_ID_LA_MED	=	(uint8_t)0xB,		// 1011 Angel Suit& LA
	NODE_ID_RA_LAT	=	(uint8_t)0xC,		// 1100
	NODE_ID_LA_LAT	=	(uint8_t)0xD,		// 1101
	NODE_ID_WIDM_R	=	(uint8_t)0xE,		// 1110 WIDM Right
	NODE_ID_WIDM_L	=	(uint8_t)0xF,		// 1111 WIDM Left
} NodeID;

typedef enum _ObjectDictionaryFNCCode {
	EMCY   		= 	((uint16_t)0x000U),
	SYNC   		=	((uint16_t)0x100U),
	SDO    		= 	((uint16_t)0x200U),
	PDO    		= 	((uint16_t)0x300U),
	TRAJECTORY	= 	((uint16_t)0x400U),
	GUI_SYNC	= 	((uint16_t)0x500U),
	QT_BYPASS   = 	((uint16_t)0x600U),
	SEND_TRAJ	= 	((uint16_t)0x700U),
	AM			= 	((uint16_t)0x800U),
} ObjectDictionaryFNCCode;

typedef enum _ObjectDictionaryRoutineOnoff {
	ROUTINE_OFF = (uint8_t)0,
	ROUTINE_ON = (uint8_t)1
} ObjectDictionaryRoutineOnoff;

typedef enum _ObjectDictionaryStateStatus {
	STATE_IDLE,
	STATE_STANDBY,
	STATE_ENABLE,
	STATE_ERROR,
	STATE_NUM
} ObjectDictionaryStateStatus;

typedef enum _ObjectDictionaryDataTypeEnum {
	/* DO NOT CHANGE */
    UINT8_T   = 1,
    UINT16_T  = 2,
    UINT32_T  = 3,
    INT8_T    = 4,
    INT16_T   = 5,
    INT32_T   = 6,
    FLOAT32_T = 7,
    FLOAT64_T = 8,
	STRING10  = 9
	/* DO NOT CHANGE */
} ObjectDictionaryDataTypeEnum;

/* ------------------- TASK ID ------------------- */
typedef enum _TaskID {
	/* DO NOT CHANGE */
	TASK_ID_LOWLEVEL = 0,
	TASK_ID_MIDLEVEL,
	TASK_ID_MSG,
	TASK_ID_WIDM,
	TASK_ID_GAIT,
	TASK_ID_SYSMNGT,
	TASK_ID_EXTDEV,
	TASK_ID_RISK,
	TASK_NUM
	/* DO NOT CHANGE */
} TaskID;

/* ------------------- SDO ID ------------------- */
typedef enum _SDOStatus {
	SDO_IDLE = 2,
	SDO_REQU = 1,
	SDO_SUCC = 0,
	SDO_FAIL = -1
} SDOStatus;

typedef enum _SDOIDLowLevel {
	SDO_ID_LOWLEVEL_GET_STATE = 0,
	SDO_ID_LOWLEVEL_SET_STATE,
	SDO_ID_LOWLEVEL_GET_ROUTINE,
	SDO_ID_LOWLEVEL_SET_ROUTINE,
	SDO_ID_LOWLEVEL_NAME,
	SDO_ID_LOWLEVEL_POLE_PAIR,
	SDO_ID_LOWLEVEL_ENCODER_RESOLUTION,
	SDO_ID_LOWLEVEL_GEAR_RATIO,
	SDO_ID_LOWLEVEL_TORQUE_CONSTANT,
	SDO_ID_LOWLEVEL_VELOCITY_CONSTANT,
	SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT,
	SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT,
	SDO_ID_LOWLEVEL_MAX_VELOCITY,
	SDO_ID_LOWLEVEL_COMMUTATION_DUTY,
	SDO_ID_LOWLEVEL_USER_DIRECTION,
	SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG,
	SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE,
	SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE,
	SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY,
	SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG,
	SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD,
	SDO_ID_LOWLEVEL_INERTIA,
	SDO_ID_LOWLEVEL_DAMPING_COEF,
	SDO_ID_LOWLEVEL_MECH_MODEL_A,
	SDO_ID_LOWLEVEL_MECH_MODEL_B,
	SDO_ID_LOWLEVEL_FRICTION_ID_INFO,
	SDO_ID_LOWLEVEL_FRICTION_LUT_INFO,
	SDO_ID_LOWLEVEL_SET_COMMUTATION_SENSOR,
	SDO_ID_LOWLEVEL_SET_POS_FEEDBACK_SENSOR,
	SDO_ID_LOWLEVEL_SET_E_ANGLE_HOMING_SENSOR,
	SDO_ID_LOWLEVEL_SET_M_ANGLE_HOMING_SENSOR,
	SDO_ID_LOWLEVEL_SET_SENSOR_USAGE,
	SDO_ID_LOWLEVEL_SET_AUX_INPUT,
	SDO_ID_LOWLEVEL_CURRENT_PERIODIC_SIG_INFO,
	SDO_ID_LOWLEVEL_MD_VERSION,
	SDO_ID_LOWLEVEL_INC_ENCODER_PRESCALER,
	SDO_ID_LOWLEVEL_BEMF_COMP_GAIN,
	SDO_ID_LOWLEVEL_FRICTION_COMP_GAIN_SS,
	SDO_ID_LOWLEVEL_CURRENT_KF_ONOFF,
	SDO_ID_LOWLEVEL_CURRENT_KF_A,
	SDO_ID_LOWLEVEL_CURRENT_KF_B,
	SDO_ID_LOWLEVEL_CURRENT_KF_C,
	SDO_ID_LOWLEVEL_CURRENT_KF_Q,
	SDO_ID_LOWLEVEL_CURRENT_KF_R,
	SDO_ID_LOWLEVEL_CURRENT_LPF_ONOFF,


	SDO_ID_LOWLEVEL_NUM
} SDOIDLowLevel;

typedef enum _SDOIDMidLevel {
	SDO_ID_MIDLEVEL_GET_STATE = 0,
	SDO_ID_MIDLEVEL_SET_STATE,
	SDO_ID_MIDLEVEL_GET_ROUTINE,
	SDO_ID_MIDLEVEL_SET_ROUTINE,

	SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH,
	SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH,
	SDO_ID_MIDLEVEL_IRC_NUMERATOR,
	SDO_ID_MIDLEVEL_IRC_DENOMINATOR,
	SDO_ID_MIDLEVEL_IRC_SATURATION,

	SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS,
	SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER,

	SDO_ID_MIDLEVEL_CURRENT_PERIODIC_SIG_INFO,
	SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO,
	SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO,

	SDO_ID_MIDLEVEL_DOB_Q_BW,
	SDO_ID_MIDLEVEL_DOB_GQ_NUM,
	SDO_ID_MIDLEVEL_DOB_GQ_DEN,
	SDO_ID_MIDLEVEL_DOB_Q_NUM,
	SDO_ID_MIDLEVEL_DOB_Q_DEN,
	SDO_ID_MIDLEVEL_DOB_SATURATION,

	SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW,
	SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN,
	SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN,
	SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY,
	SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN,
	SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN,
	SDO_ID_MIDLEVEL_MID_CTRL_SATURATION,
	SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER1_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER1_CHANGE_DIRECTION,
	SDO_ID_MIDLEVEL_ABSENCODER2_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER2_CHANGE_DIRECTION,
	SDO_ID_MIDLEVEL_VSD_STIFFNESS,
	SDO_ID_MIDLEVEL_VSD_DAMPER,
	SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE,
	SDO_ID_MIDLEVEL_VSD_STIFF_RANGE,
	SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT,
	SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT,
	SDO_ID_MIDLEVEL_VSD_SATURATION,
	SDO_ID_MIDLEVEL_FEEDFORWARD_NUM,
	SDO_ID_MIDLEVEL_FEEDFORWARD_DEN,
	SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR,
	SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG,
	SDO_ID_MIDLEVEL_ENCODER_RESOLUTION,
	SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO,
	SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG,
	SDO_ID_MIDLEVEL_P_VECTOR_YD,
	SDO_ID_MIDLEVEL_P_VECTOR_L,
	SDO_ID_MIDLEVEL_P_VECTOR_S0,
	SDO_ID_MIDLEVEL_P_VECTOR_SD,
	SDO_ID_MIDLEVEL_F_VECTOR_MODE_IDX,
	SDO_ID_MIDLEVEL_F_VECTOR_TMAX,
	SDO_ID_MIDLEVEL_F_VECTOR_DELAY,
	SDO_ID_MIDLEVEL_I_VECTOR_EPSILON,
	SDO_ID_MIDLEVEL_I_VECTOR_KP,
	SDO_ID_MIDLEVEL_I_VECTOR_KD,
	SDO_ID_MIDLEVEL_I_VECTOR_LAMBDA,
	SDO_ID_MIDLEVEL_I_VECTOR_DURATION,
	SDO_ID_MIDLEVEL_I_VECTOR_KP_MAX,
	SDO_ID_MIDLEVEL_I_VECTOR_KD_MAX,
	SDO_ID_MIDLEVEL_I_VECTOR_OPTION,
	SDO_ID_MIDLEVEL_DESIRED_MECH_ANGLE,
	SDO_ID_MIDLEVEL_ABSENCODER1_LOCATION,
	SDO_ID_MIDLEVEL_ABSENCODER2_LOCATION,
	SDO_ID_MIDLEVEL_C_VECTOR_FF_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_PD_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_IC_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_DOB_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_IRC_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_FC_GAIN,
	SDO_ID_MIDLEVEL_ABSENCODER1_MODULE_ID,
	SDO_ID_MIDLEVEL_ABSENCODER2_MODULE_ID,
	SDO_ID_MIDLEVEL_TVCF_VERIFICATION_INFO,
	SDO_ID_MIDLEVEL_GAIN_TRANSITION_TIME,
	SDO_ID_MIDLEVEL_FREEZE,
	SDO_ID_MIDLEVEL_POSITION_REFERENCE_OFFSET,
	SDO_ID_MIDLEVEL_TRAPE_ID_INFO,
	SDO_ID_MIDLEVEL_FRICTION_COMP_PARAM,

	SDO_ID_MIDLEVEL_NUM
} SDOIDMidLevel;

typedef enum _SDOIDMsg {
	SDO_ID_MSG_GET_STATE = 0,
	SDO_ID_MSG_SET_STATE,
	SDO_ID_MSG_GET_ROUTINE,
	SDO_ID_MSG_SET_ROUTINE,
	SDO_ID_MSG_PDO_LIST,
	SDO_ID_MSG_MS_ENUM,
	SDO_ID_MSG_GUI_COMM_ONOFF,
	SDO_ID_MSG_GUI_COMM_COMMAND,
	SDO_ID_MSG_SYNCH_MODE_ONOFF,
	SDO_ID_MSG_GUI_QT_DETECT,
	SDO_ID_MSG_GUI_QT_ID_RECEIVE,
	SDO_ID_MSG_MD_PDO_ENABLE,
	SDO_ID_MSG_MD_SEND_TRAJ,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_MSG_NUM
} SDOIDMsg;

typedef enum _SDOIDWIDM { //abbreviation
	SDO_ID_WIDM_GET_STATE = 0,
	SDO_ID_WIDM_SET_STATE,
	SDO_ID_WIDM_GET_ROUTINE,
	SDO_ID_WIDM_SET_ROUTINE,
	SDO_ID_WIDM_FOR_TEST,
	SDO_ID_WIDM_MAG_INVA,
	SDO_ID_WIDM_MAG_IRON_ERROR,
//	SDO_ID_WIDM_SET_ABSOFFSET_CMD,
	SDO_ID_WIDM_SET_ACC_SCALE_FACTOR_X,
	SDO_ID_WIDM_SET_ACC_SCALE_FACTOR_Y,
	SDO_ID_WIDM_SET_ACC_SCALE_FACTOR_Z,
	SDO_ID_WIDM_SET_GYR_SCALE_FACTOR_X,
	SDO_ID_WIDM_SET_GYR_SCALE_FACTOR_Y,
	SDO_ID_WIDM_SET_GYR_SCALE_FACTOR_Z,
	SDO_ID_WIDM_SET_ACC_BIAS_X,
	SDO_ID_WIDM_SET_ACC_BIAS_Y,
	SDO_ID_WIDM_SET_ACC_BIAS_Z,
	SDO_ID_WIDM_SET_GYR_BIAS_X,
	SDO_ID_WIDM_SET_GYR_BIAS_Y,
	SDO_ID_WIDM_SET_GYR_BIAS_Z,
	SDO_ID_WIDM_SET_GYR_SIGN_X,
	SDO_ID_WIDM_SET_GYR_SIGN_Y,
	SDO_ID_WIDM_SET_GYR_SIGN_Z,
	SDO_ID_WIDM_SET_FUZZY_WCL,
	SDO_ID_WIDM_SET_FUZZY_WCH,
	SDO_ID_WIDM_SET_FUZZY_ALPHA,
	SDO_ID_WIDM_SET_FUZZY_S,
	SDO_ID_WIDM_SET_FUZZY_M0,
	SDO_ID_WIDM_SET_FUZZY_ACC_MEAN,
	SDO_ID_WIDM_SET_FUZZY_WC_M,
	SDO_ID_WIDM_SET_FUZZY_WC_DEBUG,
	SDO_ID_WIDM_START_CALIBRATION,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_WIDM_NUM
} SDOIDWIDM;

typedef enum _SDOIDSysMngt {
	SDO_ID_SYSMNGT_GET_STATE = 0,
	SDO_ID_SYSMNGT_SET_STATE,
	SDO_ID_SYSMNGT_GET_ROUTINE,
	SDO_ID_SYSMNGT_SET_ROUTINE,
	SDO_ID_SYSMNGT_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_SYSMNGT_NUM
} SDOIDSysMngt;

typedef enum _SDOIDExtDev {
	SDO_ID_EXTDEV_GET_STATE = 0,
	SDO_ID_EXTDEV_SET_STATE,
	SDO_ID_EXTDEV_GET_ROUTINE,
	SDO_ID_EXTDEV_SET_ROUTINE,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_EXTDEV_NUM
} SDOIDExtDev;

typedef enum _SDOIDRiskMngr {
	SDO_ID_RISK_GET_STATE = 0,
	SDO_ID_RISK_SET_STATE,
	SDO_ID_RISK_GET_ROUTINE,
	SDO_ID_RISK_SET_ROUTINE,
	SDO_ID_RISK_DC_SET_LENGTH,
	SDO_ID_RISK_DC_SET_DIRECT,
	SDO_ID_RISK_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_RISK_NUM
} SDOIDRiskMngr;

/* ------------------- PDO ID ------------------- */
typedef enum _PDOIDLowlevel {
	PDO_ID_LOWLEVEL_3PHASES_CURRENT_RAW,
	PDO_ID_LOWLEVEL_3PHASES_CURRENT_KF,
	PDO_ID_LOWLEVEL_3PHASES_VOLTAGE_RAW,
	PDO_ID_LOWLEVEL_3PHASES_VOLTAGE_KF,
	PDO_ID_LOWLEVEL_POSITION,
	PDO_ID_LOWLEVEL_VELOCITY,
	PDO_ID_LOWLEVEL_CLARKE_OUT,
	PDO_ID_LOWLEVEL_PARK_OUT,
	PDO_ID_LOWLEVEL_VOLTAGE_IN,
	PDO_ID_LOWLEVEL_ELEC_ANGLE,
	PDO_ID_LOWLEVEL_PRBS_DATA,

	PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT,
	PDO_ID_LOWLEVEL_CURRENT_OUTPUT,

	PDO_ID_LOWLEVEL_AUXILIARY_INPUT,
	PDO_ID_LOWLEVEL_F_VECTOR_INPUT,
	PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT,
	PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT,
	PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT,
	PDO_ID_LOWLEVEL_IRC_INPUT,
	PDO_ID_LOWLEVEL_MID_CTRL_INPUT,
	PDO_ID_LOWLEVEL_ANALYZER_INPUT,

	PDO_ID_LOWLEVEL_COMMUTATION_STEP,
	PDO_ID_LOWLEVEL_FRICTION_ID_REF,
	PDO_ID_LOWLEVEL_HALL_SENSOR_SIG,
	PDO_ID_LOWLEVEL_HALL_SENSOR_LOGIC,

	PDO_ID_LOWLEVEL_STATOR_TEMP,
	PDO_ID_LOWLEVEL_ADV_ELEC_ANGLE,

	PDO_ID_LOWLEVEL_NUM
} PDOIDLowlevel;


typedef enum _PDOIDMidLevel {
	PDO_ID_MIDLEVEL_LOOP_CNT,
	PDO_ID_MIDLEVEL_REF_POSITION,
	PDO_ID_MIDLEVEL_REF_VELOCITY,
	PDO_ID_MIDLEVEL_ACTUAL_POSITION,
	PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW,
	PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ,
	PDO_ID_MIDLEVEL_IMP_CTRL_INPUT,
	PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT,
	PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT,
	PDO_ID_MIDLEVEL_VSD_INPUT,
	PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT,
	PDO_ID_MIDLEVEL_F_VECTOR_INPUT,
	PDO_ID_MIDLEVEL_ABSENCODER1_POSITION,
	PDO_ID_MIDLEVEL_ABSENCODER2_POSITION,
	PDO_ID_MIDLEVEL_DOB_DISTURABNCE,
	PDO_ID_MIDLEVEL_DOB_INPUT,
	PDO_ID_MIDLEVEL_FF_INPUT,
	PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED,
	PDO_ID_MIDLEVEL_IMP_EPSILON,
	PDO_ID_MIDLEVEL_IMP_KP,
	PDO_ID_MIDLEVEL_IMP_KD,
	PDO_ID_MIDLEVEL_IMP_LAMDA,
	PDO_ID_MIDLEVEL_REF_POSITION1, // position_reference(k+1)
	PDO_ID_MIDLEVEL_REF_POSITION2, // position_reference(k+2)
	PDO_ID_MIDLEVEL_RISK,
	PDO_ID_MIDLEVEL_TOTAL_REF_POSITION, // PosRef + cos3Ref
	PDO_ID_MIDLEVEL_TVCF_VER_FREQUENCY,
	PDO_ID_MIDLEVEL_TRAPE_ID_DONE,
	PDO_ID_MIDLEVEL_SBS_ID_DONE,

	PDO_ID_MIDLEVEL_NUM
} PDOIDMidLevel;

typedef enum _PDOIDMsg {
	/* USER CODE START*/
	PDO_ID_MSG_TEST1,
	PDO_ID_MSG_TEST2,
	PDO_ID_MSG_TEST3,
	PDO_ID_MSG_TEST4,
	PDO_ID_MSG_TEST5,
	PDO_ID_MSG_TEST6,
	PDO_ID_MSG_TEST7,
	PDO_ID_MSG_TEST8,
	PDO_ID_MSG_TEST9,
	PDO_ID_MSG_TEST10,
	PDO_ID_WS5_MD_TRANSMIT_16BIT,
	PDO_ID_WS5_MD_TRANSMIT_32BIT,
	/* USER CODE STOP*/
	PDO_ID_MSG_NUM
} PDOIDMsg;

typedef enum _PDOIDWIDM {
	/* USER CODE START*/
	PDO_ID_WIDM_LOOP_CNT,
	PDO_ID_WIDM_ACC_X,
	PDO_ID_WIDM_ACC_Y,
	PDO_ID_WIDM_ACC_Z,
	PDO_ID_WIDM_GYR_X,
	PDO_ID_WIDM_GYR_Y,
	PDO_ID_WIDM_GYR_Z,
	PDO_ID_WIDM_MAG_X,
	PDO_ID_WIDM_MAG_Y,
	PDO_ID_WIDM_MAG_Z,

	PDO_ID_WIDM_ACC_XYZ,
	PDO_ID_WIDM_GYR_XYZ,
	PDO_ID_WIDM_MAG_XYZ,

	PDO_ID_WIDM_MAG_CALIB_XYZ,
	PDO_ID_WIDM_ACC_GYR_XYZ,
	PDO_ID_WIDM_QUATERNION,

	PDO_ID_WIDM_WALKING_STATE,
	PDO_ID_WIDM_GAIT_PHASE,
	PDO_ID_WIDM_TENSION_P,
	PDO_ID_WIDM_TENSION_D,

	PDO_ID_WIDM_DEG_ACC,
	PDO_ID_WIDM_DEG_GYR,
	PDO_ID_WIDM_DEG_ACC_FILTERED,
	PDO_ID_WIDM_DEG_GYR_FILTERED,
	PDO_ID_WIDM_DEG_TVCF,

	PDO_ID_WIDM_FUZZY_M_ACC,
	PDO_ID_WIDM_FUZZY_M_GYR,
	PDO_ID_WIDM_FUZZY_M,
	PDO_ID_WIDM_FUZZY_WC,

	PDO_ID_WIDM_TILT_ANGLE,

	PDO_ID_WIDM_TVCF_ROLL,
	PDO_ID_WIDM_TVCF_PITCH,
	PDO_ID_WIDM_TVCF_YAW,

	PDO_ID_WIDM_SO3_GYR_FILTERED_X,
	PDO_ID_WIDM_SO3_GYR_FILTERED_Y,
	PDO_ID_WIDM_SO3_GYR_FILTERED_Z,
	PDO_ID_WIDM_SO3_ACC_FILTERED_X,
	PDO_ID_WIDM_SO3_ACC_FILTERED_Y,
	PDO_ID_WIDM_SO3_ACC_FILTERED_Z,

	/* USER CODE STOP*/
	PDO_ID_WIDM_NUM
} PDOIDWIDM;

typedef enum _PDOIDSysMngt {
	/* USER CODE START*/
	PDO_ID_SYSTEM_VOLT,
	PDO_ID_SYSTEM_CURR,
	PDO_ID_SYSTEM_TEMP,
	PDO_ID_SYSTEM_PCTG,
	/* USER CODE STOP*/
	PDO_ID_SYSMNGT_NUM
} PDOIDSysMngt;

typedef enum _PDOIDExtDev {
	/* USER CODE START*/
	PDO_ID_EXTDEV_TEST1,
	/* USER CODE STOP*/
	PDO_ID_EXTDEV_NUM
} PDOIDExtDev;

typedef enum _PDOIDRiskMngr {
	PDO_ID_RISK_FSR,
	PDO_ID_RISK_LP,
	PDO_ID_RISK_DC_LENGTH_REF,
	PDO_ID_RISK_DC_DIRECTION_CMD,
	PDO_ID_RISK_DC_LENGTH_ACT,
	PDO_ID_RISK_DC_DIRECTION_ACT,
	PDO_ID_RISK_DC_BUTTON_STATE,
	PDO_ID_RISK_NTC_MOTOR_TEMP,
	/* USER CODE START*/

	/* USER CODE STOP*/
	PDO_ID_RISK_NUM
} PDOIDRiskMngr;

/* ------------------- ROUTINE ID ------------------- */
typedef enum _RoutineIDLowlevel{
	ROUTINE_ID_LOWLEVEL_COMMUTATION_SET,
	ROUTINE_ID_LOWLEVEL_ELECTRICAL_SYS_ID,
	ROUTINE_ID_LOWLEVEL_ELECTRICAL_BEMF_ID,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL_BANDWIDTH_CHECK,
	ROUTINE_ID_LOWLEVEL_ADVANCED_FRICTION_ID,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_ID_VEL_CTRL_EVAL,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION_FF,
	ROUTINE_ID_LOWLEVEL_CURRENT_SINE_REF,
	ROUTINE_ID_LOWLEVEL_CURRENT_REC_REF,
	ROUTINE_ID_LOWLEVEL_CURRENT_TANH_REF,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL_TRACKING_CHECK,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION_SS,

	ROUTINE_ID_LOWLEVEL_NUM
} RoutineIDLowlevel;

typedef enum _RoutineIDMidlevel {
	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS,
	ROUTINE_ID_MIDLEVEL_IRC,
	ROUTINE_ID_MIDLEVEL_IMPEDANCE_CONTROL,
	ROUTINE_ID_MIDLEVEL_POSITION_REC_REF,
	ROUTINE_ID_MIDLEVEL_POSITION_SINE_REF,

	ROUTINE_ID_MIDLEVEL_POSITION_CTRL,
	ROUTINE_ID_MIDLEVEL_VELOCITY_CTRL,
    ROUTINE_ID_MIDLEVEL_VELOCITY_SINE_REF,
	ROUTINE_ID_MIDLEVEL_VELOCITY_REC_REF,

	ROUTINE_ID_MIDLEVEL_CURRENT_SINE_REF,
	ROUTINE_ID_MIDLEVEL_CURRENT_REC_REF,
	ROUTINE_ID_MIDLEVEL_CURRENT_TANH_REF,

	ROUTINE_ID_MIDLEVEL_GET_HALL_SENSOR_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_INCENCODER_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_ABSENCODER1_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_ABSENCODER2_VALUE,

	ROUTINE_ID_MIDLEVEL_COMPRESSIONAL_VSD,
	ROUTINE_ID_MIDLEVEL_BACKLASH_TEST,
	ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS,
	ROUTINE_ID_MIDLEVEL_P_VECTOR_DECODER,
	ROUTINE_ID_MIDLEVEL_F_VECTOR_DECODER,
	ROUTINE_ID_MIDLEVEL_FEEDFORWARD_FILTER,
	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS_VERIFY,

	ROUTINE_ID_MIDLEVEL_POSITION_TRAPE_REF,
	ROUTINE_ID_MIDLEVEL_COS3_REF_DECODER,
	ROUTINE_ID_MIDLEVEL_POSITION_SINE_REF_WITHOUT_OFFSET,

	ROUTINE_ID_MIDLEVEL_TVCF_VERIFICATION,
	ROUTINE_ID_MIDLEVEL_TRAPEZOIDAL_ID,
	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS_POSITION,
	ROUTINE_ID_MIDLEVEL_FRICTION_COMPENSATION,

	/* USER CODE STOP*/
	ROUTINE_ID_MIDLEVEL_NUM
} RoutineIDMidlevel;

typedef enum _RoutineIDMsg {
	/* USER CODE START*/
	ROUTINE_ID_MSG_PDO_SEND,
	ROUTINE_ID_MSG_PDO_DUMMY_TEST,
	ROUTINE_ID_MSG_WS5_PDO_PACK,

	/* USER CODE STOP*/
	ROUTINE_ID_MSG_NUM
} _RoutineIDMsg;

typedef enum _RoutineIDWIDM {
	/* USER CODE START*/
	ROUTINE_ID_WIDM_6AXIS_GETVALUE,
	ROUTINE_ID_WIDM_3AXIS_GETVALUE,
	ROUTINE_ID_WIDM_RPY_CAL,
	ROUTINE_ID_WIDM_WALKING_STATE,
	ROUTINE_ID_WIDM_MAGNET_GETVALUE,
	ROUTINE_ID_WIDM_TOTAL_FUNCTION,
	ROUTINE_ID_WIDM_QUATERNION,
	ROUTINE_ID_WIDM_FUZZY_DEBUG,
	ROUTINE_ID_TVCF_QUATERNION,
	ROUTINE_ID_GYR_CALIBRATION,

	/* USER CODE STOP*/
	ROUTINE_ID_WIDM_NUM
} RoutineIDWIDM;

typedef enum __RoutineIDSysMngt {
	/* USER CODE START*/
	ROUTINE_ID_SYSMNGT_GET_POWER_VALUE,
	ROUTINE_ID_SYSMNGT_CHECK_POWER_STATE,
	ROUTINE_ID_SYSMNGT_RUN_STATUS_LED,
	ROUTINE_ID_SYSMNGT_RUN_BATTERY_LED,
	ROUTINE_ID_SYSMNGT_RUN_BUZZER,
	ROUTINE_ID_SYSMNGT_POWER_ON_SEQ,

	/* USER CODE STOP*/
	ROUTINE_ID_SYSMNGT_NUM
} RoutineIDSysMngt;

typedef enum _RoutineIDExtDev {
	/* USER CODE START*/
	ROUTINE_ID_EXTDEV_TEST,

	/* USER CODE STOP*/
	ROUTINE_ID_EXTDEV_NUM
} _RoutineIDExtDev;

typedef enum _RoutineIDRiskMngr {

	ROUTINE_ID_RISK_DETECT_RISK,
	ROUTINE_ID_RISK_HANDLE_RISK,
	ROUTINE_ID_RISK_PACK_RISK,
	/* USER CODE START*/

	/* USER CODE STOP*/
	ROUTINE_ID_RISK_NUM
} RoutineIDRiskMngr;

typedef uint8_t SDOinfo;			// ObjectDictionary_DataTypeEnum
typedef uint8_t PDOinfo[2];			// ObjectDictionary_DataTypeEnum, number of data


/**
 *------------------------------------------------------------
 *                      GLOBAL VARIABLES
 *------------------------------------------------------------
 * @brief Extern declarations for global variables.
 */

extern SDOinfo SDO_Table[TASK_NUM][SDO_MAX_NUM];
extern PDOinfo PDO_Table[TASK_NUM][PDO_MAX_NUM];


/**
 *------------------------------------------------------------
 *                     FUNCTION PROTOTYPES
 *------------------------------------------------------------
 * @brief Function prototypes declaration for this module.
 */

uint8_t Convert_DataSize(int t_data_size);
void Create_SDOTable_ObjDictionary(void);
void Create_PDOTable_ObjDictionary(void);


#endif /* OBJECT_DICTIONARIES_H_ */
